import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import './Letan.css';
import appointmentService from '../services/appointmentService';
import patientService from '../services/patientService';
import departmentService from '../services/departmentService';
import healthPlanService from '../services/healthPlanService';

const KhamTrucTiep = () => {
    const [isNewPatient, setIsNewPatient] = useState(false);
    const [patientInfo, setPatientInfo] = useState({
        hoTen: '',
        soDienThoai: '',
        email: '',
        ngaySinh: '',
        gioiTinh: '',
        diaChi: '',
        cccd: ''
    });
    const [selectedOption, setSelectedOption] = useState(''); // L∆∞u option ƒë∆∞·ª£c ch·ªçn (department ID ho·∫∑c service type)
    const [selectedOptionType, setSelectedOptionType] = useState(''); // Lo·∫°i option: 'package', 'department', 'doctor'
    const [selectedDoctor, setSelectedDoctor] = useState('');
    const [searchResult, setSearchResult] = useState(null);
    const [searchedPhone, setSearchedPhone] = useState(null);
    const [foundPatients, setFoundPatients] = useState([]);
    const [showPatientModal, setShowPatientModal] = useState(false);
    const [selectedPatientForModal, setSelectedPatientForModal] = useState(null);
    const [modalMode, setModalMode] = useState(''); // 'edit' ho·∫∑c 'view'
    const [isFormFilled, setIsFormFilled] = useState(false); // State ƒë·ªÉ theo d√µi form ƒë√£ ƒë∆∞·ª£c ƒëi·ªÅn
    
    // State ƒë·ªÉ qu·∫£n l√Ω loading v√† l·ªãch kh√°m t·ª´ API
    const [isLoadingPatients, setIsLoadingPatients] = useState(false);
    const [isLoadingAppointments, setIsLoadingAppointments] = useState(false);
    const [apiAppointments, setApiAppointments] = useState([]);
    const [error, setError] = useState(null);
    const [doctors, setDoctors] = useState([]);
    const [departments, setDepartments] = useState([]);
    const [healthPlans, setHealthPlans] = useState([]);
    const [secondDropdownOptions, setSecondDropdownOptions] = useState([]);
    
    const [selectedAppointment, setSelectedAppointment] = useState(null);
    const [showConfirmModal, setShowConfirmModal] = useState(false);
    const [showCancelModal, setShowCancelModal] = useState(false);

    // Load departments v√† health plans khi component mount
    useEffect(() => {
        const loadInitialData = async () => {
            try {
                const [departmentsData, healthPlansData] = await Promise.all([
                    departmentService.getAllDepartments(),
                    healthPlanService.getAllHealthPlans()
                ]);
                
                console.log('üè• Departments loaded:', departmentsData);
                console.log('üìã Health Plans loaded from API:', healthPlansData);
                
                setDepartments(departmentsData);
                setHealthPlans(healthPlansData);
                // setDoctors(doctorsData); // T·∫°m th·ªùi comment
            } catch (error) {
                console.error('‚ùå Error loading initial data:', error);
            }
        };
        
        loadInitialData();
    }, []);

    // X·ª≠ l√Ω thay ƒë·ªïi dropdown ƒë·∫ßu ti√™n
    const handleFirstDropdownChange = async (e) => {
        const selectedValue = e.target.value;
        setSelectedOption(selectedValue);
        setSelectedDoctor(''); // Reset dropdown th·ª© 2
        setSecondDropdownOptions([]);
        
        if (!selectedValue) {
            setSelectedOptionType('');
            return;
        }

        // Ph√¢n t√≠ch gi√° tr·ªã ƒë∆∞·ª£c ch·ªçn
        if (selectedValue === 'PACKAGE') {
            // Ch·ªçn "G√≥i kh√°m" - hi·ªÉn th·ªã t·∫•t c·∫£ d·ªãch v·ª• kh√°m
            setSelectedOptionType('package');
            try {
                // L·∫•y t·∫•t c·∫£ d·ªãch v·ª• t·ª´ API (kh√¥ng filter theo type v√¨ API response c√≥ th·ªÉ kh√¥ng c√≥ tr∆∞·ªùng type)
                setSecondDropdownOptions(healthPlans);
                console.log('üì¶ Package services loaded:', healthPlans);
            } catch (error) {
                console.error('‚ùå Error loading services:', error);
            }
        } else if (selectedValue === 'ALL_DOCTORS') {
            // Ch·ªçn "B√°c sƒ©" - hi·ªÉn th·ªã t·∫•t c·∫£ b√°c sƒ©
            setSelectedOptionType('doctor');
            try {
                // L·∫•y t·∫•t c·∫£ b√°c sƒ© t·ª´ t·∫•t c·∫£ khoa
                let allDoctors = [];
                for (const department of departments) {
                    try {
                        const doctors = await departmentService.getDoctorsByDepartment(department.id);
                        allDoctors = [...allDoctors, ...doctors.map(doc => ({
                            ...doc,
                            departmentName: department.name
                        }))];
                    } catch (error) {
                        console.error(`‚ùå Error loading doctors for department ${department.id}:`, error);
                    }
                }
                setSecondDropdownOptions(allDoctors);
                console.log('üë®‚Äç‚öïÔ∏è All doctors loaded:', allDoctors);
            } catch (error) {
                console.error('‚ùå Error loading all doctors:', error);
            }
        } else {
            // Ch·ªçn chuy√™n khoa c·ª• th·ªÉ - hi·ªÉn th·ªã b√°c sƒ© trong khoa ƒë√≥
            setSelectedOptionType('department');
            try {
                const doctors = await departmentService.getDoctorsByDepartment(selectedValue);
                setSecondDropdownOptions(doctors);
                console.log('üë®‚Äç‚öïÔ∏è Department doctors loaded:', doctors);
            } catch (error) {
                console.error('‚ùå Error loading department doctors:', error);
                setSecondDropdownOptions([]);
            }
        }
    };

    const handleSearchPatient = async () => {
        if (!patientInfo.soDienThoai || patientInfo.soDienThoai.trim() === '') {
            setSearchResult({ found: false, message: 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i ƒë·ªÉ t√¨m ki·∫øm.' });
            setFoundPatients([]);
            setApiAppointments([]);
            return;
        }

        setIsLoadingPatients(true);
        setIsLoadingAppointments(true);
        setError(null);

        try {
            // G·ªçi API ƒë·ªÉ t√¨m b·ªánh nh√¢n theo s·ªë ƒëi·ªán tho·∫°i
            const [patientsResponse, appointmentsResponse] = await Promise.all([
                patientService.getPatientsByPhone(patientInfo.soDienThoai.trim()),
                appointmentService.getAppointmentsByPhone(patientInfo.soDienThoai.trim())
            ]);

            // Debug logs
            console.log('üîç Patients API Response:', patientsResponse);
            console.log('üìÖ Appointments API Response:', appointmentsResponse);

            // X·ª≠ l√Ω d·ªØ li·ªáu b·ªánh nh√¢n - gi·ªØ nguy√™n th√¥ng tin t·ª´ API
            const foundPatientsData = (patientsResponse?.data || []).map(patient => ({
                ...patient,
                // Ch·ªâ th√™m s·ªë ƒëi·ªán tho·∫°i search n·∫øu patient kh√¥ng c√≥ s·ªë ri√™ng
                searchedPhone: patientInfo.soDienThoai.trim()
            }));
            
            if (foundPatientsData.length > 0) {
                setFoundPatients(foundPatientsData);
                setIsNewPatient(false);
                setSearchedPhone(patientInfo.soDienThoai);
                setSearchResult({ 
                    found: true, 
                    message: `T√¨m th·∫•y ${foundPatientsData.length} h·ªì s∆° b·ªánh nh√¢n v·ªõi s·ªë ƒëi·ªán tho·∫°i ${patientInfo.soDienThoai}` 
                });
            } else {
                setFoundPatients([]);
                setIsNewPatient(true);
                setSearchedPhone(null);
                setSearchResult({ found: false, message: 'Kh√¥ng t√¨m th·∫•y b·ªánh nh√¢n. Vui l√≤ng nh·∫≠p th√¥ng tin m·ªõi.' });
            }

            // X·ª≠ l√Ω d·ªØ li·ªáu l·ªãch kh√°m
            const appointmentsData = appointmentsResponse?.data || [];
            console.log('üìÖ Appointments data:', appointmentsData);
            setApiAppointments(appointmentsData);

        } catch (error) {
            console.error('Error searching patient:', error);
            
            // Log chi ti·∫øt l·ªói ƒë·ªÉ debug
            if (error.response) {
                console.error('API Error Response:', error.response.data);
                console.error('API Error Status:', error.response.status);
                console.error('API Error Headers:', error.response.headers);
            } else if (error.request) {
                console.error('Network Error - No Response:', error.request);
            } else {
                console.error('Request Setup Error:', error.message);
            }
            
            // Hi·ªÉn th·ªã l·ªói chi ti·∫øt h∆°n
            let errorMessage = 'C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm th√¥ng tin b·ªánh nh√¢n.';
            if (error.response) {
                if (error.response.status === 404) {
                    errorMessage = 'Kh√¥ng t√¨m th·∫•y API endpoint. Ki·ªÉm tra k·∫øt n·ªëi backend.';
                } else if (error.response.status === 500) {
                    errorMessage = 'L·ªói server backend. Vui l√≤ng ki·ªÉm tra logs server.';
                } else if (error.response.status === 400) {
                    errorMessage = 'Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá. Ki·ªÉm tra format s·ªë ƒëi·ªán tho·∫°i.';
                } else {
                    errorMessage = `L·ªói API: ${error.response.status} - ${error.response.data?.message || 'Unknown error'}`;
                }
            } else if (error.request) {
                errorMessage = 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Ki·ªÉm tra network v√† backend server.';
            }
            
            setError(errorMessage);
            setFoundPatients([]);
            setApiAppointments([]);
            setSearchResult({ found: false, message: 'C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm. Vui l√≤ng th·ª≠ l·∫°i.' });
            setIsNewPatient(true);
            setSearchedPhone(null);
        } finally {
            setIsLoadingPatients(false);
            setIsLoadingAppointments(false);
        }
    };

    // Function ƒë·ªÉ refresh l·∫°i danh s√°ch l·ªãch kh√°m sau khi c√≥ thay ƒë·ªïi
    const refreshAppointments = async () => {
        if (searchedPhone) {
            try {
                const response = await appointmentService.getAppointmentsByPhone(searchedPhone);
                setApiAppointments(response?.data || []);
            } catch (error) {
                console.error('Error refreshing appointments:', error);
            }
        }
    };

    const handleFillPatientInfo = (patient) => {
        setPatientInfo({
            hoTen: patient.fullName || patient.hoTen,
            soDienThoai: patient.searchedPhone || patient.phone || patient.soDienThoai, // ∆Øu ti√™n s·ªë ƒë√£ search
            email: patient.email || '',
            ngaySinh: patient.birth || patient.ngaySinh,
            gioiTinh: patient.gender || patient.gioiTinh,
            diaChi: patient.address || patient.diaChi,
            cccd: patient.cccd || ''
        });
        setIsFormFilled(true); // ƒê√°nh d·∫•u form ƒë√£ ƒë∆∞·ª£c ƒëi·ªÅn
        alert(`ƒê√£ ƒëi·ªÅn th√¥ng tin b·ªánh nh√¢n "${patient.fullName || patient.hoTen}" v√†o phi·∫øu kh√°m!`);
    };

    const handleEditPatient = (patient) => {
        // Map d·ªØ li·ªáu t·ª´ API response sang modal
        const mappedPatient = {
            ...patient,
            hoTen: patient.fullName || patient.hoTen,
            soDienThoai: patient.phone || patient.soDienThoai,
            email: patient.email || '',
            ngaySinh: patient.birth || patient.ngaySinh,
            gioiTinh: patient.gender || patient.gioiTinh, // Map gender t·ª´ API
            diaChi: patient.address || patient.diaChi,
            cccd: patient.cccd || ''
        };
        setSelectedPatientForModal(mappedPatient);
        setModalMode('edit');
        setShowPatientModal(true);
    };

    const handleViewPatient = (patient) => {
        // Map d·ªØ li·ªáu t·ª´ API response sang modal
        const mappedPatient = {
            ...patient,
            hoTen: patient.fullName || patient.hoTen,
            soDienThoai: patient.phone || patient.soDienThoai,
            email: patient.email || '',
            ngaySinh: patient.birth || patient.ngaySinh,
            gioiTinh: patient.gender || patient.gioiTinh, // Map gender t·ª´ API
            diaChi: patient.address || patient.diaChi,
            cccd: patient.cccd || ''
        };
        setSelectedPatientForModal(mappedPatient);
        setModalMode('view');
        setShowPatientModal(true);
    };

    const handleSavePatientInfo = () => {
        // Logic l∆∞u th√¥ng tin b·ªánh nh√¢n ƒë√£ ch·ªânh s·ª≠a
        alert('ƒê√£ l∆∞u th√¥ng tin b·ªánh nh√¢n!');
        setShowPatientModal(false);
        
        // N·∫øu l√† b·ªánh nh√¢n m·ªõi (kh√¥ng t√¨m th·∫•y trong danh s√°ch), th√™m v√†o danh s√°ch
        const isNewPatient = !foundPatients.find(p => p.id === selectedPatientForModal.id);
        if (isNewPatient) {
            // Ki·ªÉm tra xem c√≥ ph·∫£i l√† t·∫°o m·ªõi ho√†n to√†n kh√¥ng (kh√¥ng c√≥ s·ªë ƒëi·ªán tho·∫°i trong search)
            if (!searchedPhone && selectedPatientForModal.soDienThoai) {
                // C·∫≠p nh·∫≠t searchedPhone v√† foundPatients cho b·ªánh nh√¢n m·ªõi ho√†n to√†n
                setSearchedPhone(selectedPatientForModal.soDienThoai);
                setFoundPatients([selectedPatientForModal]);
                setSearchResult({ 
                    found: true, 
                    message: `ƒê√£ t·∫°o h·ªì s∆° m·ªõi cho s·ªë ƒëi·ªán tho·∫°i ${selectedPatientForModal.soDienThoai}` 
                });
            } else {
                // Th√™m v√†o danh s√°ch hi·ªán t·∫°i
                setFoundPatients([...foundPatients, selectedPatientForModal]);
            }
        } else {
            // C·∫≠p nh·∫≠t l·∫°i danh s√°ch t√¨m ki·∫øm cho b·ªánh nh√¢n ƒë√£ c√≥
            const updatedPatients = foundPatients.map(p => 
                p.id === selectedPatientForModal.id ? selectedPatientForModal : p
            );
            setFoundPatients(updatedPatients);
        }
    };

    const handleCreateNewPatient = () => {
        // T·∫°o h·ªì s∆° b·ªánh nh√¢n ho√†n to√†n m·ªõi
        const newPatient = {
            id: Date.now(), // T·∫°o ID t·∫°m th·ªùi
            hoTen: '',
            soDienThoai: '',
            email: '',
            ngaySinh: '',
            gioiTinh: '',
            diaChi: '',
            cccd: ''
        };
        setSelectedPatientForModal(newPatient);
        setModalMode('add');
        setShowPatientModal(true);
    };

    const handleAddNewRecord = () => {
        // T·∫°o h·ªì s∆° m·ªõi v·ªõi s·ªë ƒëi·ªán tho·∫°i hi·ªán t·∫°i
        const newPatient = {
            id: Date.now(), // T·∫°o ID t·∫°m th·ªùi
            hoTen: '',
            soDienThoai: searchedPhone || patientInfo.soDienThoai,
            email: '',
            ngaySinh: '',
            gioiTinh: '',
            diaChi: '',
            cccd: ''
        };
        
        setSelectedPatientForModal(newPatient);
        setModalMode('add'); // ƒê·∫∑t mode l√† 'add' thay v√¨ 'edit'
        setShowPatientModal(true);
    };

    const handleConfirm = (appointment) => {
        setSelectedAppointment(appointment);
        setShowConfirmModal(true);
    };

    const handleCancel = (appointment) => {
        setSelectedAppointment(appointment);
        setShowCancelModal(true);
    };

    const confirmAppointment = async () => {
        try {
            // G·ªçi API ƒë·ªÉ x√°c nh·∫≠n l·ªãch kh√°m - s·ª≠ d·ª•ng enum status
            await appointmentService.confirmAppointment(selectedAppointment.id, 'DA_XAC_NHAN');
            
            // C·∫≠p nh·∫≠t danh s√°ch API appointments
            setApiAppointments(apiAppointments.map(apt => 
                apt.id === selectedAppointment.id 
                    ? { ...apt, status: 'DA_XAC_NHAN' }
                    : apt
            ));

            setShowConfirmModal(false);
            alert('ƒê√£ x√°c nh·∫≠n l·ªãch h·∫πn th√†nh c√¥ng!');
            
            // Refresh danh s√°ch l·ªãch kh√°m
            await refreshAppointments();
        } catch (error) {
            console.error('Error confirming appointment:', error);
            alert('C√≥ l·ªói x·∫£y ra khi x√°c nh·∫≠n l·ªãch h·∫πn. Vui l√≤ng th·ª≠ l·∫°i.');
        }
    };

    const cancelAppointment = async () => {
        try {
            // G·ªçi API ƒë·ªÉ h·ªßy l·ªãch kh√°m - s·ª≠ d·ª•ng enum status  
            await appointmentService.confirmAppointment(selectedAppointment.id, 'KHONG_DEN');
            
            // C·∫≠p nh·∫≠t danh s√°ch API appointments
            setApiAppointments(apiAppointments.map(apt => 
                apt.id === selectedAppointment.id 
                    ? { ...apt, status: 'KHONG_DEN' }
                    : apt
            ));

            setShowCancelModal(false);
            alert('ƒê√£ h·ªßy l·ªãch h·∫πn!');
            
            // Refresh danh s√°ch l·ªãch kh√°m
            await refreshAppointments();
        } catch (error) {
            console.error('Error canceling appointment:', error);
            alert('C√≥ l·ªói x·∫£y ra khi h·ªßy l·ªãch h·∫πn. Vui l√≤ng th·ª≠ l·∫°i.');
        }
    };

    const handleCancelForm = () => {
        setPatientInfo({
            hoTen: '',
            soDienThoai: '',
            email: '',
            ngaySinh: '',
            gioiTinh: '',
            diaChi: '',
            cccd: ''
        });
        setSelectedDoctor('');
        setSelectedOption('');
        setSelectedOptionType('');
        setSecondDropdownOptions([]);
        setIsNewPatient(false);
        setSearchedPhone(null);
        setSearchResult(null);
        setFoundPatients([]);
        setIsFormFilled(false); // Reset tr·∫°ng th√°i form
    };

    // Ch·ªâ s·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ API
    const filteredAppointments = apiAppointments.filter(apt => {
        if (searchedPhone) {
            return apt.soDienThoai === searchedPhone || apt.phone === searchedPhone;
        }
        return true;
    });

    const handleSubmit = (e) => {
        e.preventDefault();
        
        // Ki·ªÉm tra th√¥ng tin ƒë√£ ƒë·ªß ch∆∞a
        if (!selectedOption || !selectedDoctor) {
            alert('Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß lo·∫°i kh√°m v√† d·ªãch v·ª•/b√°c sƒ©!');
            return;
        }
        
        let selectedInfo = {};
        
        if (selectedOptionType === 'package') {
            // T√¨m th√¥ng tin g√≥i d·ªãch v·ª• ƒë√£ ch·ªçn
            const selectedService = healthPlans.find(plan => plan.id == selectedDoctor);
            selectedInfo = {
                type: 'G√≥i kh√°m',
                service: selectedService?.name || 'D·ªãch v·ª• kh√¥ng x√°c ƒë·ªãnh',
                price: selectedService?.price || 0
            };
        } else if (selectedOptionType === 'department') {
            // T√¨m th√¥ng tin khoa v√† b√°c sƒ© ƒë√£ ch·ªçn
            const selectedDept = departments.find(dept => dept.id == selectedOption);
            const selectedDoctorInfo = secondDropdownOptions.find(doc => doc.id == selectedDoctor);
            selectedInfo = {
                type: 'Chuy√™n khoa',
                department: selectedDept?.name || 'Khoa kh√¥ng x√°c ƒë·ªãnh',
                doctor: selectedDoctorInfo?.position || 'B√°c sƒ© kh√¥ng x√°c ƒë·ªãnh'
            };
        } else if (selectedOptionType === 'doctor') {
            // T√¨m th√¥ng tin b√°c sƒ© ƒë√£ ch·ªçn
            const selectedDoctorInfo = secondDropdownOptions.find(doc => doc.id == selectedDoctor);
            selectedInfo = {
                type: 'B√°c sƒ©',
                doctor: selectedDoctorInfo?.position || 'B√°c sƒ© kh√¥ng x√°c ƒë·ªãnh',
                department: selectedDoctorInfo?.departmentName || 'Khoa kh√¥ng x√°c ƒë·ªãnh'
            };
        }
        
        console.log('üìã Phi·∫øu kh√°m ƒë∆∞·ª£c t·∫°o v·ªõi th√¥ng tin:');
        console.log('üë§ B·ªánh nh√¢n:', patientInfo);
        console.log('üè• Th√¥ng tin kh√°m:', selectedInfo);
        
        let alertMessage = `ƒê√£ in phi·∫øu kh√°m th√†nh c√¥ng!\nLo·∫°i kh√°m: ${selectedInfo.type}`;
        if (selectedInfo.service) alertMessage += `\nD·ªãch v·ª•: ${selectedInfo.service}`;
        if (selectedInfo.department) alertMessage += `\nKhoa: ${selectedInfo.department}`;
        if (selectedInfo.doctor) alertMessage += `\nB√°c sƒ©: ${selectedInfo.doctor}`;
        
        alert(alertMessage);
    };

    return (
        <div className="letan-container">
            {/* Header */}
            <div className="letan-header">
                <div className="letan-header-content">
                    <h1>H·ªá th·ªëng qu·∫£n l√Ω l·ªÖ t√¢n</h1>
                    <div className="letan-user-info">
                        <span>Xin ch√†o, L·ªÖ t√¢n</span>
                        <button className="logout-btn">ƒêƒÉng xu·∫•t</button>
                    </div>
                </div>
            </div>

            {/* Navigation */}
            <div className="letan-nav">
                <div className="letan-nav-content">
                    <button className="nav-btn active">
                        <i className="fas fa-user-plus"></i>
                        T·∫°o phi·∫øu kh√°m
                    </button>
                    <Link to="/letan/xac-nhan-dat-lich" className="nav-btn">
                        <i className="fas fa-calendar-check"></i>
                        X√°c nh·∫≠n ƒë·∫∑t l·ªãch
                    </Link>
                </div>
            </div>

            {/* Main Content */}
            <div className="letan-main">
                {/* T√¨m ki·∫øm b·ªánh nh√¢n - Full width ·ªü tr√™n */}
                <div className="search-patient-section">
                    <h2>T√¨m ki·∫øm b·ªánh nh√¢n</h2>
                    <div className="search-controls">
                        <div className="search-left">
                            <div className="search-form">
                                <div className="form-group">
                                    <label>S·ªë ƒëi·ªán tho·∫°i:</label>
                                    <input 
                                        type="text" 
                                        placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                                        value={patientInfo.soDienThoai}
                                        onChange={(e) => setPatientInfo({...patientInfo, soDienThoai: e.target.value})}
                                    />
                                </div>
                                <button 
                                    className="btn-search" 
                                    onClick={handleSearchPatient}
                                    disabled={isLoadingPatients || isLoadingAppointments}
                                >
                                    {isLoadingPatients || isLoadingAppointments ? (
                                        <>
                                            <i className="fas fa-spinner fa-spin"></i>
                                            ƒêang t√¨m ki·∫øm...
                                        </>
                                    ) : (
                                        <>
                                            <i className="fas fa-search"></i>
                                            T√¨m ki·∫øm
                                        </>
                                    )}
                                </button>
                            </div>
                        </div>
                        <div className="search-right">
                            <button className="btn-create-new-patient" onClick={handleCreateNewPatient}>
                                <i className="fas fa-user-plus"></i>
                                T·∫°o m·ªõi h·ªì s∆° b·ªánh nh√¢n
                            </button>
                        </div>
                    </div>
                </div>

                {/* Error Message */}
                {error && (
                    <div className="error-message" style={{
                        backgroundColor: '#f8d7da',
                        color: '#721c24',
                        padding: '0.75rem 1.25rem',
                        marginBottom: '1rem',
                        border: '1px solid #f5c6cb',
                        borderRadius: '0.375rem',
                        fontSize: '0.875rem'
                    }}>
                        <i className="fas fa-exclamation-triangle" style={{marginRight: '0.5rem'}}></i>
                        {error}
                    </div>
                )}

                {/* Two Column Layout */}
                <div className="kham-truc-tiep-content">
                    {/* Left Column */}
                    <div className="left-column">
                        {/* Danh s√°ch ƒë·∫∑t l·ªãch online */}
                        <div className="appointments-list">
                            <div className="appointments-header">
                                <h2>Danh s√°ch l·ªãch ƒë·∫∑t online</h2>
                            </div>
                            
                            <div className="appointments-table">
                                <table>
                                    <thead>
                                        <tr>
                                            <th>H·ªç t√™n</th>
                                            <th>S·ªë ƒëi·ªán tho·∫°i</th>
                                            <th>B√°c sƒ©</th>
                                            <th>Khung gi·ªù</th>
                                            <th>Ng√†y kh√°m</th>
                                            <th>Tr·∫°ng th√°i</th>
                                            <th>Thao t√°c</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {isLoadingAppointments ? (
                                            <tr>
                                                <td colSpan="7" style={{ textAlign: 'center', padding: '2rem' }}>
                                                    <i className="fas fa-spinner fa-spin" style={{ marginRight: '0.5rem' }}></i>
                                                    ƒêang t·∫£i danh s√°ch l·ªãch kh√°m...
                                                </td>
                                            </tr>
                                        ) : filteredAppointments.length > 0 ? (
                                            filteredAppointments.map(appointment => {
                                                // Chuy·ªÉn ƒë·ªïi status t·ª´ backend sang ti·∫øng Vi·ªát
                                                const getVietnameseStatus = (status) => {
                                                    switch(status) {
                                                        case 'CHO_XAC_NHAN':
                                                            return 'Ch·ªù x√°c nh·∫≠n';
                                                        case 'DA_XAC_NHAN':
                                                            return 'ƒê√£ x√°c nh·∫≠n';
                                                        case 'KHONG_DEN':
                                                            return 'ƒê√£ h·ªßy';
                                                        default:
                                                            return status || 'Ch·ªù x√°c nh·∫≠n';
                                                    }
                                                };

                                                // Format th·ªùi gian hi·ªÉn th·ªã
                                                const formatTime = (time) => {
                                                    if (!time) return 'N/A';
                                                    // N·∫øu time l√† string d·∫°ng "HH:mm:ss" ho·∫∑c "HH:mm"
                                                    if (typeof time === 'string') {
                                                        return time.substring(0, 5); // L·∫•y HH:mm
                                                    }
                                                    return time.toString();
                                                };

                                                // Format ng√†y hi·ªÉn th·ªã
                                                const formatDate = (date) => {
                                                    if (!date) return 'N/A';
                                                    // N·∫øu date l√† string d·∫°ng "YYYY-MM-DD"
                                                    if (typeof date === 'string') {
                                                        const parts = date.split('-');
                                                        if (parts.length === 3) {
                                                            return `${parts[2]}/${parts[1]}/${parts[0]}`;
                                                        }
                                                    }
                                                    return date.toString();
                                                };

                                                const vietnameseStatus = getVietnameseStatus(appointment.status);

                                                return (
                                                    <tr key={appointment.id}>
                                                        <td>{appointment.fullName || 'N/A'}</td>
                                                        <td>{appointment.phone || 'N/A'}</td>
                                                        <td>{appointment.doctorResponse?.position || 'Ch∆∞a ph√¢n c√¥ng'}</td>
                                                        <td>{formatTime(appointment.time)}</td>
                                                        <td>{formatDate(appointment.date)}</td>
                                                        <td>
                                                            <span className={`status-badge ${
                                                                vietnameseStatus === 'ƒê√£ x√°c nh·∫≠n' ? 'confirmed' : 
                                                                vietnameseStatus === 'ƒê√£ h·ªßy' ? 'cancelled' : 'pending'
                                                            }`}>
                                                                {vietnameseStatus}
                                                            </span>
                                                        </td>
                                                        <td>
                                                            <div className="action-buttons">
                                                                {vietnameseStatus === 'Ch·ªù x√°c nh·∫≠n' && (
                                                                    <>
                                                                        <button 
                                                                            className="btn-confirm"
                                                                            onClick={() => handleConfirm(appointment)}
                                                                        >
                                                                            X√°c nh·∫≠n
                                                                        </button>
                                                                        <button 
                                                                            className="btn-cancel"
                                                                            onClick={() => handleCancel(appointment)}
                                                                        >
                                                                            H·ªßy
                                                                        </button>
                                                                    </>
                                                                )}
                                                            </div>
                                                        </td>
                                                    </tr>
                                                );
                                            })
                                        ) : (
                                            <tr>
                                                <td colSpan="7" style={{ textAlign: 'center', color: '#6c757d', fontStyle: 'italic', padding: '2rem' }}>
                                                    {searchedPhone ? 'Kh√¥ng t√¨m th·∫•y l·ªãch kh√°m n√†o cho s·ªë ƒëi·ªán tho·∫°i n√†y' : 'Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i ƒë·ªÉ t√¨m ki·∫øm l·ªãch kh√°m'}
                                                </td>
                                            </tr>
                                        )}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>

                    {/* Right Column */}
                    <div className="right-column">
                        {/* B·∫£ng danh s√°ch b·ªánh nh√¢n - lu√¥n hi·ªÉn th·ªã */}
                        <div className="found-patients-section">
                            <div className="found-patients-header">
                                <h2>Danh s√°ch h·ªì s∆° b·ªánh nh√¢n</h2>
                                {foundPatients.length > 0 && (
                                    <button 
                                        className="btn-add-record"
                                        onClick={() => handleAddNewRecord()}
                                        title="Th√™m h·ªì s∆° m·ªõi v·ªõi s·ªë ƒëi·ªán tho·∫°i n√†y"
                                    >
                                        <i className="fas fa-plus"></i>
                                        Th√™m h·ªì s∆°
                                    </button>
                                )}
                            </div>
                            <div className="found-patients-table">
                                <table>
                                    <thead>
                                        <tr>
                                            <th>H·ªç t√™n</th>
                                            <th>Thao t√°c</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {foundPatients.length > 0 ? (
                                            foundPatients.map(patient => (
                                                <tr key={patient.id}>
                                                    <td>
                                                        <div>
                                                            <strong>{patient.fullName || patient.hoTen}</strong>
                                                            {patient.relationship && (
                                                                <div className="text-muted small">
                                                                    Quan h·ªá: {patient.relationship}
                                                                </div>
                                                            )}
                                                            <div className="text-muted small">
                                                                {/* SƒêT t√†i kho·∫£n: {patient.searchedPhone} */}
                                                            </div>
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <div className="action-buttons">
                                                            <button 
                                                                className="btn-fill"
                                                                onClick={() => handleFillPatientInfo(patient)}
                                                                title="ƒêi·ªÅn v√†o phi·∫øu kh√°m"
                                                            >
                                                                <i className="fas fa-edit"></i>
                                                                ƒêi·ªÅn
                                                            </button>
                                                            <button 
                                                                className="btn-edit"
                                                                onClick={() => handleEditPatient(patient)}
                                                                title="S·ª≠a th√¥ng tin"
                                                            >
                                                                <i className="fas fa-pencil-alt"></i>
                                                                S·ª≠a
                                                            </button>
                                                            <button 
                                                                className="btn-view"
                                                                onClick={() => handleViewPatient(patient)}
                                                                title="Xem chi ti·∫øt"
                                                            >
                                                                <i className="fas fa-eye"></i>
                                                                Xem
                                                            </button>
                                                        </div>
                                                    </td>
                                                </tr>
                                            ))
                                        ) : (
                                            <tr>
                                                <td colSpan="2" style={{ textAlign: 'center', color: '#6c757d', fontStyle: 'italic', padding: '2rem' }}>
                                                    {searchResult?.found === false ? 'Kh√¥ng t√¨m th·∫•y b·ªánh nh√¢n' : 'Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i ƒë·ªÉ t√¨m ki·∫øm b·ªánh nh√¢n'}
                                                </td>
                                            </tr>
                                        )}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>

                {/* Phi·∫øu kh√°m b·ªánh - Section cu·ªëi c√πng */}
                <div className="search-patient-section" style={{marginTop: '2rem'}}>
                    <h2>Phi·∫øu kh√°m b·ªánh</h2>
                    <form onSubmit={handleSubmit} className="patient-form">
                        <div className="form-row">
                            <div className="form-group">
                                <label>H·ªç v√† t√™n *</label>
                                <input 
                                    type="text" 
                                    maxLength="100" 
                                    placeholder="Nh·∫≠p v√†o h·ªç v√† t√™n" 
                                    required
                                    pattern="[A-Za-z√Ä-·ªπ\s'-]+"
                                    title="T√™n ch·ªâ ch·ª©a ch·ªØ c√°i v√† kho·∫£ng tr·∫Øng"
                                    value={patientInfo.hoTen}
                                    onChange={(e) => setPatientInfo({...patientInfo, hoTen: e.target.value})}
                                    disabled={isFormFilled}
                                />
                            </div>
                            <div className="form-group">
                                <label>S·ªë ƒëi·ªán tho·∫°i *</label>
                                <input 
                                    type="tel" 
                                    maxLength="10" 
                                    placeholder="Nh·∫≠p v√†o s·ªë ƒëi·ªán tho·∫°i" 
                                    required
                                    pattern="0\d{9}"
                                    title="S·ªë ƒëi·ªán tho·∫°i Vi·ªát Nam b·∫Øt ƒë·∫ßu b·∫±ng 0, 10 ch·ªØ s·ªë"
                                    value={patientInfo.soDienThoai}
                                    onChange={(e) => setPatientInfo({...patientInfo, soDienThoai: e.target.value})}
                                    disabled={isFormFilled}
                                />
                            </div>
                        </div>

                        <div className="form-row">
                            <div className="form-group">
                                <label>Email</label>
                                <input 
                                    type="email" 
                                    maxLength="100" 
                                    placeholder="Nh·∫≠p v√†o email" 
                                    value={patientInfo.email}
                                    onChange={(e) => setPatientInfo({...patientInfo, email: e.target.value})}
                                    disabled={isFormFilled}
                                />
                            </div>
                            <div className="form-group">
                                <label>Ng√†y sinh *</label>
                                <input 
                                    type="date" 
                                    required
                                    value={patientInfo.ngaySinh}
                                    onChange={(e) => setPatientInfo({...patientInfo, ngaySinh: e.target.value})}
                                    disabled={isFormFilled}
                                />
                            </div>
                        </div>

                        <div className="form-row">
                            <div className="form-group">
                                <label>Gi·ªõi t√≠nh *</label>
                                <select 
                                    required
                                    value={patientInfo.gioiTinh}
                                    onChange={(e) => setPatientInfo({...patientInfo, gioiTinh: e.target.value})}
                                    disabled={isFormFilled}
                                >
                                    <option value="">Ch·ªçn gi·ªõi t√≠nh</option>
                                    <option value="NAM">Nam</option>
                                    <option value="NU">N·ªØ</option>
                                </select>
                            </div>
                            <div className="form-group">
                                <label>ƒê·ªãa ch·ªâ *</label>
                                <input 
                                    type="text" 
                                    maxLength="200" 
                                    placeholder="Nh·∫≠p v√†o ƒë·ªãa ch·ªâ" 
                                    required
                                    pattern="[A-Za-z0-9√Ä-·ªπ\s.,'-/]+"
                                    title="ƒê·ªãa ch·ªâ ch·ªâ ch·ª©a ch·ªØ, s·ªë, kho·∫£ng tr·∫Øng v√† c√°c k√Ω t·ª± ., - ' /"
                                    value={patientInfo.diaChi}
                                    onChange={(e) => setPatientInfo({...patientInfo, diaChi: e.target.value})}
                                    disabled={isFormFilled}
                                />
                            </div>
                        </div>
                        
                        <div className='form-row'>
                            <div className="form-group">
                                <label>CƒÉn c∆∞·ªõc c√¥ng d√¢n *</label>
                                <input 
                                    type="text" 
                                    maxLength="12" 
                                    pattern="\d{12}" 
                                    placeholder="Nh·∫≠p v√†o 12 s·ªë CCCD" 
                                    required
                                    value={patientInfo.cccd}
                                    onChange={(e) => setPatientInfo({...patientInfo, cccd: e.target.value})}
                                    disabled={isFormFilled}
                                />
                            </div>
                        </div>

                        <div className='form-row'>
                            <div className="form-group">
                                <label>Lo·∫°i kh√°m *</label>
                                <select 
                                    required
                                    value={selectedOption}
                                    onChange={handleFirstDropdownChange}
                                    // disabled={isFormFilled}
                                >
                                    <option value="">Ch·ªçn lo·∫°i kh√°m</option>
                                    
                                    {/* Heading 1: G√≥i kh√°m */}
                                    <optgroup label="‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ G√ìI KH√ÅM ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ">
                                        <option value="PACKAGE">G√≥i kh√°m</option>
                                    </optgroup>
                                    
                                    {/* Heading 1: Chuy√™n khoa */}
                                    <optgroup label="‚îÅ‚îÅ‚îÅ CHUY√äN KHOA ‚îÅ‚îÅ‚îÅ">
                                        {departments.map(department => (
                                            <option key={`dept-${department.id}`} value={department.id}>
                                                {department.name}
                                            </option>
                                        ))}
                                    </optgroup>
                                    
                                    {/* Heading 1: B√°c sƒ© */}
                                    <optgroup label="‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ B√ÅC Sƒ® ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ">
                                        <option value="ALL_DOCTORS">T·∫•t c·∫£ b√°c sƒ©</option>
                                    </optgroup>
                                </select>
                            </div>
                    
                            <div className="form-group">
                                <label>
                                    {selectedOptionType === 'package' ? 'D·ªãch v·ª• kh√°m *' : 
                                     selectedOptionType === 'department' ? 'B√°c sƒ© trong khoa *' :
                                     selectedOptionType === 'doctor' ? 'Ch·ªçn b√°c sƒ© *' : 'D·ªãch v·ª•/B√°c sƒ© *'}
                                </label>
                                <select 
                                    required
                                    value={selectedDoctor}
                                    onChange={(e) => setSelectedDoctor(e.target.value)}
                                    // disabled={isFormFilled || !selectedOption}
                                    disabled={!selectedOption}
                                >
                                    <option value="">
                                        {!selectedOption ? 'Vui l√≤ng ch·ªçn lo·∫°i kh√°m tr∆∞·ªõc' : 
                                         selectedOptionType === 'package' ? 'Ch·ªçn d·ªãch v·ª• kh√°m' :
                                         'Ch·ªçn b√°c sƒ©'}
                                    </option>
                                    
                                                    {selectedOptionType === 'package' && secondDropdownOptions.map(service => (
                                        <option key={`service-${service.id}`} value={service.id}>
                                            {service.name} {service.price ? `- ${new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(service.price)}` : ''}
                                        </option>
                                    ))}
                                    
                                    {(selectedOptionType === 'department' || selectedOptionType === 'doctor') && secondDropdownOptions.map(doctor => (
                                        <option key={`doctor-${doctor.id}`} value={doctor.id}>
                                            {doctor.position || 'B√°c sƒ©'} {doctor.departmentName && `(${doctor.departmentName})`}
                                        </option>
                                    ))}
                                </select>
                            </div>
                        </div>

                        <div className="form-actions">
                            <button type="button" className="btn-cancel" onClick={handleCancelForm}>
                                L√†m m·ªõi
                            </button>
                            <button type="submit" className="btn-submit">
                                <i className="fas fa-plus"></i>
                                In phi·∫øu kh√°m
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            {/* Modal s·ª≠a/xem th√¥ng tin b·ªánh nh√¢n */}
                    {showPatientModal && selectedPatientForModal && (
                        <div className="modal-overlay">
                            <div className="modal patient-modal">
                                <div className="modal-header">
                                    <h3>
                                        {modalMode === 'edit' ? 'S·ª≠a th√¥ng tin b·ªánh nh√¢n' : 
                                         modalMode === 'add' ? 'Th√™m h·ªì s∆° b·ªánh nh√¢n m·ªõi' : 
                                         'Th√¥ng tin chi ti·∫øt b·ªánh nh√¢n'}
                                    </h3>
                                    <button 
                                        className="modal-close"
                                        onClick={() => setShowPatientModal(false)}
                                    >
                                        <i className="fas fa-times"></i>
                                    </button>
                                </div>
                                <div className="modal-body">
                                    <div className="patient-form">
                                        <div className="form-row">
                                            <div className="form-group">
                                                <label>H·ªç v√† t√™n *</label>
                                                <input 
                                                    type="text" 
                                                    value={selectedPatientForModal.hoTen}
                                                    onChange={(e) => setSelectedPatientForModal({
                                                        ...selectedPatientForModal, 
                                                        hoTen: e.target.value
                                                    })}
                                                    disabled={modalMode === 'view'}
                                                />
                                            </div>
                                            <div className="form-group">
                                                <label>S·ªë ƒëi·ªán tho·∫°i *</label>
                                                <input 
                                                    type="tel" 
                                                    value={selectedPatientForModal.soDienThoai}
                                                    onChange={(e) => setSelectedPatientForModal({
                                                        ...selectedPatientForModal, 
                                                        soDienThoai: e.target.value
                                                    })}
                                                    disabled={modalMode === 'view'}
                                                />
                                            </div>
                                        </div>
                                        <div className="form-row">
                                            <div className="form-group">
                                                <label>Email</label>
                                                <input 
                                                    type="email" 
                                                    value={selectedPatientForModal.email}
                                                    onChange={(e) => setSelectedPatientForModal({
                                                        ...selectedPatientForModal, 
                                                        email: e.target.value
                                                    })}
                                                    disabled={modalMode === 'view'}
                                                />
                                            </div>
                                            <div className="form-group">
                                                <label>Ng√†y sinh *</label>
                                                <input 
                                                    type="date" 
                                                    value={selectedPatientForModal.ngaySinh}
                                                    onChange={(e) => setSelectedPatientForModal({
                                                        ...selectedPatientForModal, 
                                                        ngaySinh: e.target.value
                                                    })}
                                                    disabled={modalMode === 'view'}
                                                />
                                            </div>
                                        </div>
                                        <div className="form-row">
                                            <div className="form-group">
                                                <label>Gi·ªõi t√≠nh *</label>
                                                <select 
                                                    value={selectedPatientForModal.gioiTinh}
                                                    onChange={(e) => setSelectedPatientForModal({
                                                        ...selectedPatientForModal, 
                                                        gioiTinh: e.target.value
                                                    })}
                                                    disabled={modalMode === 'view'}
                                                >
                                                    <option value="">Ch·ªçn gi·ªõi t√≠nh</option>
                                                    <option value="NAM">Nam</option>
                                                    <option value="NU">N·ªØ</option>
                                                </select>
                                            </div>
                                            <div className="form-group">
                                                <label>CCCD</label>
                                                <input 
                                                    type="text" 
                                                    value={selectedPatientForModal.cccd}
                                                    onChange={(e) => setSelectedPatientForModal({
                                                        ...selectedPatientForModal, 
                                                        cccd: e.target.value
                                                    })}
                                                    disabled={modalMode === 'view'}
                                                />
                                            </div>
                                        </div>
                                        <div className="form-row">
                                            <div className="form-group">
                                                <label>ƒê·ªãa ch·ªâ *</label>
                                                <textarea 
                                                    value={selectedPatientForModal.diaChi}
                                                    onChange={(e) => setSelectedPatientForModal({
                                                        ...selectedPatientForModal, 
                                                        diaChi: e.target.value
                                                    })}
                                                    disabled={modalMode === 'view'}
                                                    rows="3"
                                                />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div className="modal-footer">
                                    <button 
                                        className="btn-cancel"
                                        onClick={() => setShowPatientModal(false)}
                                    >
                                        {modalMode === 'edit' || modalMode === 'add' ? 'H·ªßy' : 'ƒê√≥ng'}
                                    </button>
                                    {(modalMode === 'edit' || modalMode === 'add') && (
                                        <button 
                                            className="btn-confirm"
                                            onClick={handleSavePatientInfo}
                                        >
                                            {modalMode === 'add' ? 'Th√™m h·ªì s∆°' : 'L∆∞u th√¥ng tin'}
                                        </button>
                                    )}
                                </div>
                            </div>
                        </div>
                    )}

                    {/* Modal x√°c nh·∫≠n */}
                    {showConfirmModal && selectedAppointment && (
                        <div className="modal-overlay">
                            <div className="modal">
                                <div className="modal-header">
                                    <h3>X√°c nh·∫≠n l·ªãch h·∫πn</h3>
                                    <button 
                                        className="modal-close"
                                        onClick={() => setShowConfirmModal(false)}
                                    >
                                        <i className="fas fa-times"></i>
                                    </button>
                                </div>
                                <div className="modal-body">
                                    <div className="appointment-details">
                                        <p><strong>H·ªç t√™n:</strong> {selectedAppointment.fullName || 'N/A'}</p>
                                        <p><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> {selectedAppointment.phone || 'N/A'}</p>
                                        <p><strong>Email:</strong> {selectedAppointment.email || 'N/A'}</p>
                                        <p><strong>Ng√†y sinh:</strong> {selectedAppointment.birth || 'N/A'}</p>
                                        <p><strong>ƒê·ªãa ch·ªâ:</strong> {selectedAppointment.address || 'N/A'}</p>
                                        <p><strong>B√°c sƒ©:</strong> {selectedAppointment.doctorResponse?.position || 'Ch∆∞a ph√¢n c√¥ng'}</p>
                                        <p><strong>Ng√†y kh√°m:</strong> {selectedAppointment.date || 'N/A'}</p>
                                        <p><strong>Gi·ªù kh√°m:</strong> {selectedAppointment.time ? selectedAppointment.time.substring(0, 5) : 'N/A'}</p>
                                        <p><strong>Tri·ªáu ch·ª©ng:</strong> {selectedAppointment.symptoms || 'Kh√¥ng c√≥'}</p>
                                    </div>
                                </div>
                                <div className="modal-footer">
                                    <button 
                                        className="btn-cancel"
                                        onClick={() => setShowConfirmModal(false)}
                                    >
                                        H·ªßy
                                    </button>
                                    <button 
                                        className="btn-confirm"
                                        onClick={confirmAppointment}
                                    >
                                        X√°c nh·∫≠n l·ªãch h·∫πn
                                    </button>
                                </div>
                            </div>
                        </div>
                    )}

                    {/* Modal h·ªßy l·ªãch */}
                    {showCancelModal && selectedAppointment && (
                        <div className="modal-overlay">
                            <div className="modal">
                                <div className="modal-header">
                                    <h3>H·ªßy l·ªãch h·∫πn</h3>
                                    <button 
                                        className="modal-close"
                                        onClick={() => setShowCancelModal(false)}
                                    >
                                        <i className="fas fa-times"></i>
                                    </button>
                                </div>
                                <div className="modal-body">
                                    <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy l·ªãch h·∫πn c·ªßa <strong>{selectedAppointment.fullName}</strong>?</p>
                                </div>
                                <div className="modal-footer">
                                    <button 
                                        className="btn-cancel"
                                        onClick={() => setShowCancelModal(false)}
                                    >
                                        Kh√¥ng
                                    </button>
                                    <button 
                                        className="btn-danger"
                                        onClick={cancelAppointment}
                                    >
                                        H·ªßy l·ªãch h·∫πn
                                    </button>
                                </div>
                            </div>
                        </div>
                    )}
        </div>
    );
};

export default KhamTrucTiep;
